- name: Determine the current Swarm leader and set network config
  hosts: localhost
  gather_facts: no
  become: no
  tasks:
    - name: Get the current Swarm leader
      command: docker node ls --format "{{ '{{.Hostname}} {{.Leader}}' }}"
      register: swarm_leader_output
      changed_when: false

    - name: Extract and store Swarm leader
      set_fact:
        swarm_leader: "{{ item.split()[0] }}"
      when: "'Leader' in item"
      with_items: "{{ swarm_leader_output.stdout_lines }}"

    - name: Define docker_gwbridge network configuration
      set_fact:
        docker_gwbridge_config: >
          docker network create
          --driver bridge
          --subnet=172.22.0.0/24
          --ipv6
          --subnet=2600:1702:6650:9b20:22::/80
          --opt com.docker.network.bridge.name=docker_gwbridge
          docker_gwbridge

- name: Propagate essential facts to all nodes
  hosts: orange
  gather_facts: no
  tasks:
    - name: Set Swarm leader and network config on all nodes
      set_fact:
        swarm_leader: "{{ hostvars[ansible_play_hosts[0]]['swarm_leader'] }}"
        docker_gwbridge_config: "{{ hostvars[ansible_play_hosts[0]]['docker_gwbridge_config'] }}"

- name: Fetch and distribute Swarm join tokens
  hosts: "{{ hostvars[ansible_play_hosts[0]]['swarm_leader'] }}"
  become: yes
  gather_facts: no
  tasks:
    - name: Fetch Swarm join tokens
      command: docker swarm join-token -q {{ item }}
      register: swarm_tokens
      changed_when: false
      loop:
        - worker
        - manager

    - name: Store Swarm join tokens and leader IP
      set_fact:
        worker_token: "{{ swarm_tokens.results[0].stdout }}"
        manager_token: "{{ swarm_tokens.results[1].stdout }}"
        swarm_leader_ip: "{{ ansible_host | default(inventory_hostname) }}"

- name: Distribute Swarm join tokens to all nodes
  hosts: orange
  gather_facts: no
  tasks:
    - name: Set Swarm join tokens on all nodes
      set_fact:
        worker_token: "{{ hostvars[swarm_leader]['worker_token'] }}"
        manager_token: "{{ hostvars[swarm_leader]['manager_token'] }}"
        swarm_leader_ip: "{{ hostvars[swarm_leader]['swarm_leader_ip'] }}"

- name: Update Non-Leader Nodes
  hosts: orange
  serial: 1
  become: yes
  gather_facts: yes
  tasks:
    - name: Skip leader node (processed last)
      meta: end_play
      when: inventory_hostname == swarm_leader

    - name: Demote non-leader managers
      command: docker node demote {{ inventory_hostname }}
      when: "'manager' in node_role.stdout and inventory_hostname != swarm_leader"

    - name: Leave the Swarm (abort if it fails)
      command: docker swarm leave
      register: swarm_leave_result
      failed_when: swarm_leave_result.rc != 0

    - name: Remove old docker_gwbridge network
      command: docker network rm docker_gwbridge
      ignore_errors: yes

    - name: Create new docker_gwbridge network
      command: "{{ docker_gwbridge_config }}"

    - name: Rejoin the Swarm as a worker
      command: docker swarm join --token {{ worker_token }} {{ swarm_leader_ip }}:2377
      when: inventory_hostname != swarm_leader

    - name: Promote back to manager if originally a manager
      command: docker node promote {{ inventory_hostname }}
      when: "'manager' in node_role.stdout and inventory_hostname != swarm_leader"

- name: Update Swarm Leader (Processed Last)
  hosts: "{{ swarm_leader }}"
  serial: 1
  become: yes
  tasks:
    - name: Ensure another manager exists before demoting leader
      command: docker node promote {{ groups['orange'] | difference([inventory_hostname]) | first }}
      run_once: true

    - name: Demote Swarm leader
      command: docker node demote {{ inventory_hostname }}

    - name: Leave the Swarm (abort if it fails)
      command: docker swarm leave
      register: swarm_leave_result
      failed_when: swarm_leave_result.rc != 0

    - name: Remove old docker_gwbridge network
      command: docker network rm docker_gwbridge
      ignore_errors: yes

    - name: Create new docker_gwbridge network
      command: "{{ docker_gwbridge_config }}"

    - name: Rejoin leader as a manager
      command: docker swarm join --token {{ manager_token }} {{ groups['orange'] | difference([inventory_hostname]) | first }}:2377

    - name: Promote leader back to manager
      command: docker node promote {{ inventory_hostname }}

    - name: Fetch new Swarm join tokens
      command: docker swarm join-token -q {{ item }}
      register: new_swarm_tokens
      changed_when: false
      loop:
        - worker
        - manager

    - name: Distribute new Swarm join tokens to all nodes
      set_fact:
        worker_token: "{{ new_swarm_tokens.results[0].stdout }}"
        manager_token: "{{ new_swarm_tokens.results[1].stdout }}"
      delegate_to: "{{ item }}"
      delegate_facts: true
      with_items: "{{ groups['orange'] }}"
