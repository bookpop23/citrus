- name: Determine the current Swarm leader
  hosts: orange
  gather_facts: no
  become: yes
  tasks:
    - name: Get the current Swarm leader
      run_once: true
      command: docker node ls --format "{{ '{{.Hostname}} {{.Leader}}' }}"
      register: swarm_leader_output
      changed_when: false

    - name: Set Swarm leader fact globally
      run_once: true
      set_fact:
        swarm_leader: "{{ item.split()[0] }}"
      when: "'Leader' in item"
      with_items: "{{ swarm_leader_output.stdout_lines }}"
      delegate_to: localhost
      delegate_facts: true

- name: Process non-leader nodes
  hosts: orange
  serial: 1  # Ensures only one node is processed at a time
  become: yes
  gather_facts: yes
  tasks:
    - name: Fetch Swarm join tokens (Only on the leader)
      command: docker swarm join-token -q {{ item }}
      register: swarm_tokens
      changed_when: false
      when: inventory_hostname == hostvars['localhost']['swarm_leader']
      loop:
        - worker
        - manager

    - name: Set Swarm token facts (Only on the leader)
      set_fact:
        worker_token: "{{ swarm_tokens.results[0].stdout }}"
        manager_token: "{{ swarm_tokens.results[1].stdout }}"
      when: inventory_hostname == hostvars['localhost']['swarm_leader']

    - name: Distribute tokens to all nodes
      set_fact:
        worker_token: "{{ hostvars['localhost']['worker_token'] }}"
        manager_token: "{{ hostvars['localhost']['manager_token'] }}"
        swarm_leader_ip: "{{ hostvars['localhost']['swarm_leader'] }}"

    - name: Get Swarm node role
      command: docker node inspect --format "{{ '{{.Spec.Role}}' }}" {{ inventory_hostname }}
      register: node_role
      changed_when: false

    - name: Skip the leader until last
      meta: end_play
      when: inventory_hostname == hostvars['localhost']['swarm_leader']

    - name: Demote non-leader managers
      command: docker node demote {{ inventory_hostname }}
      when: "'manager' in node_role.stdout and inventory_hostname != hostvars['localhost']['swarm_leader']"

    - name: Leave the Swarm (abort if it fails)
      command: docker swarm leave
      register: swarm_leave_result
      failed_when: swarm_leave_result.rc != 0

    - name: Remove old docker_gwbridge network
      command: docker network rm docker_gwbridge
      ignore_errors: yes  # Ignore errors if the network doesnâ€™t exist

    - name: Create new docker_gwbridge network
      command: >
        docker network create
        --driver bridge
        --subnet=172.22.0.0/24
        --ipv6
        --subnet=2600:1702:6650:9b20:22::/80
        --opt com.docker.network.bridge.name=docker_gwbridge
        docker_gwbridge

    - name: Rejoin the Swarm as a worker
      command: docker swarm join --token {{ worker_token }} {{ swarm_leader_ip }}:2377
      when: inventory_hostname != hostvars['localhost']['swarm_leader']

    - name: Promote back to manager if originally a manager
      command: docker node promote {{ inventory_hostname }}
      when: "'manager' in node_role.stdout and inventory_hostname != hostvars['localhost']['swarm_leader']"

- name: Process the Swarm leader last
  hosts: "{{ hostvars['localhost']['swarm_leader'] }}"
  serial: 1
  become: yes
  tasks:
    - name: Ensure another manager exists before demoting the leader
      command: docker node promote {{ groups['orange'] | difference([inventory_hostname]) | first }}
      run_once: true

    - name: Demote the Swarm leader
      command: docker node demote {{ inventory_hostname }}

    - name: Leave the Swarm (abort if it fails)
      command: docker swarm leave
      register: swarm_leave_result
      failed_when: swarm_leave_result.rc != 0

    - name: Remove old docker_gwbridge network
      command: docker network rm docker_gwbridge
      ignore_errors: yes

    - name: Create new docker_gwbridge network
      command: >
        docker network create
        --driver bridge
        --subnet=172.22.0.0/24
        --ipv6
        --subnet=2600:1702:6650:9b20:22::/80
        --opt com.docker.network.bridge.name=docker_gwbridge
        docker_gwbridge

    - name: Rejoin leader as a manager
      command: docker swarm join --token {{ manager_token }} {{ groups['orange'] | difference([inventory_hostname]) | first }}:2377

    - name: Promote leader back to manager
      command: docker node promote {{ inventory_hostname }}
