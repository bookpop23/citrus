- name: Gather Docker Swarm details and set local facts
  hosts: orange
  gather_facts: no
  become: yes
  tasks:
    - name: Get Docker host info
      community.docker.docker_host_info:
      register: docker_host_info_result

    - name: Set local swarm node fact based on Docker host info
      set_fact:
        swarm_node_info:
          hostname: "{{ inventory_hostname }}"
          node_id: "{{ docker_host_info_result.host_info.Swarm.NodeID }}"
          in_swarm: "{{ docker_host_info_result.host_info.Swarm.LocalNodeState == 'active' }}"
          role: "{{ docker_host_info_result.host_info.Swarm.ControlAvailable | bool | ternary('manager', 'worker') }}"

    - name: Debug - Display limited Docker swarm info for the node
      debug:
        msg: >
          Host: {{ swarm_node_info.hostname }},
          In Swarm: {{ swarm_node_info.in_swarm }},
          Node ID: {{ swarm_node_info.node_id }},
          Role: {{ swarm_node_info.role }}

- name: Aggregate swarm node information from all nodes
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Build global swarm nodes list from host facts
      set_fact:
        global_swarm_nodes: "{{ groups['orange'] | map('extract', hostvars, 'swarm_node_info') | list }}"

    - name: Debug - Display global swarm nodes list
      debug:
        var: global_swarm_nodes

- name: Define docker_gwbridge network configuration
  hosts: orange
  gather_facts: no
  tasks:
    - name: Set docker_gwbridge configuration fact
      set_fact:
        docker_gwbridge_config:
          driver: "bridge"
          ipam_config:
            - subnet: "172.22.0.0/24"
            - subnet: "2600:1702:6650:9b20:22::/80"
          enable_ipv6: true
          driver_options:
            com.docker.network.bridge.name: "docker_gwbridge"
            com.docker.network.bridge.gateway_mode_ipv6: "routed"
            com.docker.network.bridge.gateway_ipv6: "2600:1702:6650:9b20:22::1"

- name: Update Manager Nodes
  hosts: orange
  serial: 1
  gather_facts: no
  become: yes
  tasks:
    - name: Skip processing if node is not a manager
      meta: end_play
      when: swarm_node_info.role != 'manager'

    - name: Demote manager to worker using another active manager
      delegate_to: "{{ (hostvars['localhost'].global_swarm_nodes 
                          | selectattr('role', 'equalto', 'manager') 
                          | map(attribute='hostname') 
                          | difference([inventory_hostname]) 
                          | list)[0] }}"
      community.docker.docker_node:
        hostname: "{{ inventory_hostname }}"
        role: worker
      register: demote_result
      ignore_errors: yes

    - name: Debug - Confirm demotion output
      debug:
        msg: "Demotion output: {{ demote_result }}"

    - name: Have node leave the swarm
      command: docker swarm leave --force
      register: leave_result

    - name: Debug - Confirm swarm leave result
      debug:
        msg: "Leave swarm output: {{ leave_result.stdout }}"

    - name: Remove node record from swarm using another active manager
      delegate_to: "{{ (hostvars['localhost'].global_swarm_nodes 
                          | selectattr('role', 'equalto', 'manager') 
                          | map(attribute='hostname') 
                          | difference([inventory_hostname]) 
                          | list)[0] }}"
      command: docker node rm --force {{ swarm_node_info.node_id }}
      register: node_rm_result

    - name: Debug - Confirm node removal result
      debug:
        msg: "Node removal output: {{ node_rm_result.stdout }}"

    - name: Remove old docker_gwbridge network
      community.docker.docker_network:
        name: docker_gwbridge
        state: absent
      ignore_errors: yes

    - name: Create new docker_gwbridge network
      community.docker.docker_network:
        name: docker_gwbridge
        driver: "{{ docker_gwbridge_config.driver }}"
        ipam_config: "{{ docker_gwbridge_config.ipam_config }}"
        driver_options: "{{ docker_gwbridge_config.driver_options }}"
        enable_ipv6: "{{ docker_gwbridge_config.enable_ipv6 }}"

    - name: Rejoin swarm as worker
      command: docker swarm join --token {{ worker_token }} {{ swarm_leader_ip }}:2377
      register: join_result

    - name: Debug - Confirm swarm join output
      debug:
        msg: "Join swarm output: {{ join_result.stdout }}"

    - name: Promote node back to manager using another active manager
      delegate_to: "{{ (hostvars['localhost'].global_swarm_nodes 
                          | selectattr('role', 'equalto', 'manager') 
                          | map(attribute='hostname') 
                          | difference([inventory_hostname]) 
                          | list)[0] }}"
      community.docker.docker_node:
        hostname: "{{ inventory_hostname }}"
        role: manager
      register: promote_result
      ignore_errors: yes

    - name: Debug - Confirm promotion output
      debug:
        msg: "Promotion output: {{ promote_result }}"



# PLAY 2 - UPDATE WORKER NODES

- name: Update Worker Nodes
  hosts: orange
  serial: 1
  gather_facts: no
  become: yes
  tasks:
    - name: Skip processing if node is not a worker
      meta: end_play
      when: swarm_node_info.role != 'worker'

    - name: Have node leave the swarm
      command: docker swarm leave
      register: leave_result

    - name: Debug - Confirm swarm leave result
      debug:
        msg: "Leave swarm output: {{ leave_result.stdout }}"

    - name: Remove node record from swarm using another active manager
      delegate_to: "{{ (hostvars['localhost'].global_swarm_nodes 
                          | selectattr('role', 'equalto', 'manager') 
                          | map(attribute='hostname') 
                          | difference([inventory_hostname]) 
                          | list)[0] }}"
      command: docker node rm --force {{ swarm_node_info.node_id }}
      register: node_rm_result

    - name: Debug - Confirm node removal result
      debug:
        msg: "Node removal output: {{ node_rm_result.stdout }}"

    - name: Remove old docker_gwbridge network
      community.docker.docker_network:
        name: docker_gwbridge
        state: absent
      ignore_errors: yes

    - name: Create new docker_gwbridge network
      community.docker.docker_network:
        name: docker_gwbridge
        driver: "{{ docker_gwbridge_config.driver }}"
        ipam_config: "{{ docker_gwbridge_config.ipam_config }}"
        driver_options: "{{ docker_gwbridge_config.driver_options }}"
        enable_ipv6: "{{ docker_gwbridge_config.enable_ipv6 }}"

    - name: Rejoin swarm as worker
      command: docker swarm join --token {{ hostvars['localhost'].worker_token }} {{ swarm_leader_ip }}:2377
      register: join_result

    - name: Debug - Confirm swarm join output
      debug:
        msg: "Join swarm output: {{ join_result.stdout }}"



# PLAY 3 - UPDATE MANAGER NODES

- name: Update Manager Nodes
  hosts: orange
  serial: 1
  gather_facts: no
  become: yes
  tasks:
    - name: Skip processing if node is not a manager
      meta: end_play
      when: swarm_node_info.role != 'manager'

    - name: Demote manager to worker using another active manager
      delegate_to: "{{ (hostvars['localhost'].global_swarm_nodes 
                          | selectattr('role', 'equalto', 'manager') 
                          | map(attribute='hostname') 
                          | difference([inventory_hostname]) 
                          | list)[0] }}"
      community.docker.docker_node:
        hostname: "{{ inventory_hostname }}"
        role: worker
      register: demote_result
      ignore_errors: yes

    - name: Debug - Confirm demotion output
      debug:
        msg: "Demotion output: {{ demote_result }}"

    - name: Have node leave the swarm
      command: docker swarm leave --force
      register: leave_result

    - name: Debug - Confirm swarm leave result
      debug:
        msg: "Leave- name: Update Manager Nodes"
  hosts: orange
  serial: 1
  gather_facts: no
  become: yes
  tasks:
    - name: Skip processing if node is not a manager
      meta: end_play
      when: swarm_node_info.role != 'manager'

    - name: Demote manager to worker using another active manager
      delegate_to: "{{ (hostvars['localhost'].global_swarm_nodes 
                          | selectattr('role', 'equalto', 'manager') 
                          | map(attribute='hostname') 
                          | difference([inventory_hostname]) 
                          | list)[0] }}"
      community.docker.docker_node:
        hostname: "{{ inventory_hostname }}"
        role: worker
      register: demote_result
      ignore_errors: yes

    - name: Debug - Confirm demotion output
      debug:
        msg: "Demotion output: {{ demote_result }}"

    - name: Have node leave the swarm
      command: docker swarm leave --force
      register: leave_result

    - name: Debug - Confirm swarm leave result
      debug:
        msg: "Leave swarm output: {{ leave_result.stdout }}"

    - name: Remove node record from swarm using another active manager
      delegate_to: "{{ (hostvars['localhost'].global_swarm_nodes 
                          | selectattr('role', 'equalto', 'manager') 
                          | map(attribute='hostname') 
                          | difference([inventory_hostname]) 
                          | list)[0] }}"
      command: docker node rm --force {{ swarm_node_info.node_id }}
      register: node_rm_result

    - name: Debug - Confirm node removal result
      debug:
        msg: "Node removal output: {{ node_rm_result.stdout }}"

    - name: Remove old docker_gwbridge network
      community.docker.docker_network:
        name: docker_gwbridge
        state: absent
      ignore_errors: yes

    - name: Create new docker_gwbridge network
      community.docker.docker_network:
        name: docker_gwbridge
        driver: "{{ docker_gwbridge_config.driver }}"
        ipam_config: "{{ docker_gwbridge_config.ipam_config }}"
        driver_options: "{{ docker_gwbridge_config.driver_options }}"
        enable_ipv6: "{{ docker_gwbridge_config.enable_ipv6 }}"

    - name: Rejoin swarm as worker
      command: docker swarm join --token {{ hostvars['localhost'].worker_token }} {{ swarm_leader_ip }}:2377
      register: join_result

    - name: Debug - Confirm swarm join output
      debug:
        msg: "Join swarm output: {{ join_result.stdout }}"

    - name: Promote node back to manager using another active manager
      delegate_to: "{{ (hostvars['localhost'].global_swarm_nodes 
                          | selectattr('role', 'equalto', 'manager') 
                          | map(attribute='hostname') 
                          | difference([inventory_hostname]) 
                          | list)[0] }}"
      community.docker.docker_node:
        hostname: "{{ inventory_hostname }}"
        role: manager
      register: promote_result
      ignore_errors: yes

    - name: Debug - Confirm promotion output
      debug:
        msg: "Promotion output: {{ promote_result }}"
