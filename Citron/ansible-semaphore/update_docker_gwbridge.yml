- name: Gather node information
  hosts: orange
  gather_facts: no
  become: yes
  tasks:
    - name: Get node ID
      command: docker node inspect self --format "{{ '{{.ID}}' }}"
      register: node_id
      changed_when: false

    - name: Get node role
      command: docker node inspect self --format "{{ '{{.Spec.Role}}' }}"
      register: node_role
      changed_when: false
      ignore_errors: yes

    - name: Get leader status
      command: docker node inspect self --format "{{ '{{.ManagerStatus.Leader}}' }}"
      register: leader_status
      changed_when: false
      ignore_errors: yes

    - name: Set node facts
      set_fact:
        node_id: "{{ node_id.stdout }}"
        node_role: "{{ node_role.stdout | default('worker') }}"
        is_leader: "{{ leader_status.stdout | default('false') | bool }}"

- name: Identify Swarm leader and distribute join tokens
  hosts: orange
  gather_facts: no
  become: yes
  tasks:
    - name: Determine the leader node
      run_once: true
      delegate_to: localhost
      set_fact:
        swarm_leader: "{{ groups['orange'] | selectattr('is_leader', 'defined') | selectattr('is_leader', 'equalto', True) | first | default('') }}"
        swarm_leader_id: "{{ hostvars[swarm_leader]['node_id'] | default('') }}"

    - name: Fetch join tokens from leader
      delegate_to: "{{ swarm_leader }}"
      command: docker swarm join-token -q worker
      register: worker_token
      when: inventory_hostname == swarm_leader

    - name: Fetch manager join token
      delegate_to: "{{ swarm_leader }}"
      command: docker swarm join-token -q manager
      register: manager_token
      when: inventory_hostname == swarm_leader

    - name: Distribute join tokens
      set_fact:
        worker_token: "{{ hostvars[swarm_leader]['worker_token'].stdout }}"
        manager_token: "{{ hostvars[swarm_leader]['manager_token'].stdout }}"

- name: Update non-leader nodes
  hosts: orange
  gather_facts: no
  become: yes
  serial: 1
  tasks:
    - name: Skip if this is the leader
      meta: end_play
      when: inventory_hostname == swarm_leader

    - name: Demote manager nodes (delegated)
      delegate_to: "{{ swarm_leader }}"
      community.docker.docker_node:
        hostname: "{{ node_id }}"
        role: worker
      when: node_role == "manager"

    - name: Leave the swarm
      command: docker swarm leave
      async: 60
      poll: 0
      register: leave_async

    - name: Wait for swarm leave to complete
      async_status:
        jid: "{{ leave_async.ansible_job_id }}"
      register: leave_result
      until: leave_result.finished
      retries: 6
      delay: 10

    - name: Remove stale node records (delegated)
      delegate_to: "{{ swarm_leader }}"
      command: docker node rm {{ node_id }}
      ignore_errors: yes

    - name: Rejoin the swarm as a worker
      command: docker swarm join --token {{ worker_token }} {{ swarm_leader }}:2377

    - name: Promote node back to manager (if originally manager)
      delegate_to: "{{ swarm_leader }}"
      community.docker.docker_node:
        hostname: "{{ node_id }}"
        role: manager
      when: node_role == "manager"

- name: Update Swarm leader (processed last)
  hosts: orange
  gather_facts: no
  become: yes
  serial: 1
  tasks:
    - name: Skip if not the leader
      meta: end_play
      when: inventory_hostname != swarm_leader

    - name: Remove stale leader record (delegated)
      delegate_to: "{{ groups['orange'] | difference([swarm_leader]) | first }}"
      command: docker node rm {{ swarm_leader_id }}
      ignore_errors: yes

    - name: Leave the swarm
      command: docker swarm leave

    - name: Rejoin the swarm as a manager
      command: docker swarm join --token {{ manager_token }} {{ groups['orange'] | difference([swarm_leader]) | first }}:2377

    - name: Promote leader back to manager (delegated)
      delegate_to: "{{ groups['orange'] | difference([swarm_leader]) | first }}"
      community.docker.docker_node:
        hostname: "{{ swarm_leader_id }}"
        role: manager
