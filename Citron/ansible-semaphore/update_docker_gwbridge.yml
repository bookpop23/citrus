- name: Determine the current Swarm leader
  hosts: orange
  gather_facts: no
  become: yes
  tasks:
    - name: Get the current Swarm leader
      run_once: true
      command: docker node ls --format "{{ '{{.Hostname}} {{.Leader}}' }}"
      register: swarm_leader_output
      changed_when: false

    - name: Extract and store Swarm leader
      run_once: true
      set_fact:
        swarm_leader: "{{ item.split()[0] }}"
      when: "'Leader' in item"
      with_items: "{{ swarm_leader_output.stdout_lines }}"

    - name: Distribute Swarm leader info to all nodes
      set_fact:
        swarm_leader: "{{ hostvars['localhost']['swarm_leader'] }}"

    - name: Fetch Swarm join tokens (Only on the leader)
      run_once: true
      command: docker swarm join-token -q {{ item }}
      register: swarm_tokens
      changed_when: false
      when: inventory_hostname == swarm_leader
      loop:
        - worker
        - manager

    - name: Store Swarm join tokens on leader
      run_once: true
      set_fact:
        worker_token: "{{ swarm_tokens.results[0].stdout }}"
        manager_token: "{{ swarm_tokens.results[1].stdout }}"
      when: inventory_hostname == swarm_leader

    - name: Distribute Swarm tokens and leader IP to all nodes
      set_fact:
        worker_token: "{{ hostvars['localhost']['worker_token'] }}"
        manager_token: "{{ hostvars['localhost']['manager_token'] }}"
        swarm_leader_ip: "{{ hostvars['localhost']['swarm_leader'] }}"

    - name: Debug - Show distributed facts
      debug:
        msg: 
          - "Swarm leader is {{ swarm_leader }}"
          - "Worker token: {{ worker_token[:10] }}..."
          - "Manager token: {{ manager_token[:10] }}..."
          - "Swarm leader IP: {{ swarm_leader_ip }}"
