- name: Leader Detection - Mark Manager Nodes That Are Leader
  hosts: orange
  gather_facts: no
  become: yes
  tasks:
    - name: Get self leader status (managers return "true"; workers will error)
      command: docker node inspect self --format "{{ '{{.ManagerStatus.Leader}}' }}"
      register: leader_status
      changed_when: false
      ignore_errors: true

    - name: Debug - Show leader status for this node
      debug:
        msg: "{{ inventory_hostname }} leader status: {{ leader_status.stdout | default('') }}"
      
    - name: Mark this node as leader if status is "true"
      set_fact:
        detected_leader: "{{ inventory_hostname }}"
      when: leader_status.stdout is defined and (leader_status.stdout | trim) == "true"

- name: Aggregate and Distribute Swarm Leader
  hosts: orange
  gather_facts: no
  tasks:
    - name: Aggregate first detected leader from manager nodes
      run_once: true
      set_fact:
        swarm_leader: "{{ groups['orange'] | map('extract', hostvars, 'detected_leader') | select('defined') | list | first | default('') }}"
      
    - name: Fail if no Swarm leader was detected
      run_once: true
      fail:
        msg: "No Swarm leader was detected. Ensure at least one manager is online."
      when: swarm_leader | length == 0

    - name: Distribute Swarm leader fact to all nodes
      set_fact:
        swarm_leader: "{{ swarm_leader }}"
      
    - name: Debug - Confirm final Swarm leader on this node
      debug:
        msg: "Final Swarm leader is {{ swarm_leader }}"

- name: Define Network Configuration
  hosts: orange
  gather_facts: no
  tasks:
    - name: Set docker_gwbridge network configuration
      set_fact:
        docker_gwbridge_config:
          driver: bridge
          ipam_options:
            - subnet: "172.22.0.0/24"
            - subnet: "2600:1702:6650:9b20:22::/80"
          enable_ipv6: true
          options:
            com.docker.network.bridge.name: docker_gwbridge

- name: Fetch Join Tokens (Run Only on the Leader)
  hosts: orange
  gather_facts: no
  become: yes
  tasks:
    - name: Fetch join tokens on leader
      command: >
        docker swarm join-token -q {{ item }}
      register: token_result
      loop:
        - worker
        - manager
      when: inventory_hostname == swarm_leader

    - name: Set join tokens on leader
      set_fact:
        worker_token: "{{ token_result.results[0].stdout }}"
        manager_token: "{{ token_result.results[1].stdout }}"
        swarm_leader_ip: "{{ ansible_host }}"
      when: inventory_hostname == swarm_leader

    - name: Debug - Show join tokens and leader IP (on leader)
      debug:
        msg: "Leader IP: {{ swarm_leader_ip }}, Worker token: {{ worker_token }}, Manager token: {{ manager_token }}"
      when: inventory_hostname == swarm_leader

- name: Update Non-Leader Nodes (Serially)
  hosts: orange
  serial: 1
  gather_facts: no
  become: yes
  tasks:
    - name: Skip processing on the leader node
      meta: end_play
      when: inventory_hostname == swarm_leader

    - name: Get node role
      command: docker node inspect self --format "{{ '{{.Spec.Role}}' }}"
      register: node_role
      changed_when: false
      ignore_errors: true

    - name: Debug - Show node role
      debug:
        msg: "{{ inventory_hostname }} role: {{ node_role.stdout | default('unknown') }}"

    - name: Demote node if it is a manager
      command: docker node demote {{ inventory_hostname }}
      when: (node_role.stdout | trim) == "manager"
      ignore_errors: yes

    - name: Have node leave the swarm
      command: docker swarm leave
      register: leave_result
      failed_when: leave_result.rc != 0

    - name: Remove old docker_gwbridge network on node
      command: docker network rm docker_gwbridge
      ignore_errors: yes

    - name: Create new docker_gwbridge network on node
      command: >
        docker network create --driver bridge --subnet=172.22.0.0/24 --ipv6 --subnet=2600:1702
