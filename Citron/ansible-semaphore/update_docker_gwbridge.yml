# PLAY 1: Leader Detection & Node ID Collection
- name: Detect Swarm leader and collect node ID on each node
  hosts: orange
  gather_facts: no
  become: yes
  tasks:
    - name: Get self leader status (managers return "true")
      command: docker node inspect self --format "{{ '{{.ManagerStatus.Leader}}' }}"
      register: leader_status
      changed_when: false
      ignore_errors: true

    - name: Get self node ID
      command: docker node inspect self --format "{{ '{{.ID}}' }}"
      register: node_id_result
      changed_when: false
      ignore_errors: true

    - name: Debug - Show leader status and node ID
      debug:
        msg: "{{ inventory_hostname }}: leader status={{ leader_status.stdout | default('') }}, node ID={{ node_id_result.stdout | default('') }}"

    - name: Set detected leader facts if status is "true"
      set_fact:
        detected_leader: "{{ inventory_hostname }}"
        detected_leader_id: "{{ node_id_result.stdout }}"
      when: leader_status.stdout is defined and (leader_status.stdout | trim) == "true"

    - name: Debug - Show detected_leader facts on this node
      debug:
        msg: "{{ inventory_hostname }} detected_leader: {{ detected_leader | default('') }}, detected_leader_id: {{ detected_leader_id | default('') }}"

# PLAY 2: Aggregate and Distribute the Detected Leader Globally
- name: Aggregate and distribute Swarm leader
  hosts: orange
  gather_facts: no
  tasks:
    - name: Aggregate first detected leader and set as global swarm_leader
      run_once: true
      delegate_to: localhost
      set_fact:
        swarm_leader: "{{ groups['orange'] | map('extract', hostvars, 'detected_leader') | select('defined') | list | first | default('') }}"
        swarm_leader_id: "{{ hostvars[ (groups['orange'] | map('extract', hostvars, 'detected_leader') | select('defined') | list | first) ]['detected_leader_id'] | default('') }}"
      
    - name: Debug - Final Swarm leader (global)
      run_once: true
      delegate_to: localhost
      debug:
        msg: "Final Swarm leader is {{ swarm_leader }} (ID: {{ swarm_leader_id }})"

    - name: Fail if no Swarm leader was detected
      run_once: true
      delegate_to: localhost
      fail:
        msg: "No Swarm leader detected. Ensure at least one manager is online."
      when: swarm_leader | length == 0

    - name: Distribute global swarm_leader facts to all nodes
      set_fact:
        swarm_leader: "{{ swarm_leader }}"
        swarm_leader_id: "{{ swarm_leader_id }}"

# PLAY 3: Define the Network Configuration (Single Definition)
- name: Define docker_gwbridge network configuration
  hosts: orange
  gather_facts: no
  tasks:
    - name: Set docker_gwbridge network configuration fact
      set_fact:
        docker_gwbridge_config:
          driver: bridge
          ipam_config:
            - subnet: "172.22.0.0/24"
            - subnet: "2600:1702:6650:9b20:22::/80"
          enable_ipv6: true
          driver_options:
            com.docker.network.bridge.name: docker_gwbridge
            com.docker.network.bridge.gateway_mode_ipv6: routed

# PLAY 4: Fetch Join Tokens from the Leader (Run Only on Leader)
- name: Fetch and set join tokens on leader
  hosts: orange
  gather_facts: no
  become: yes
  tasks:
    - name: Fetch worker join token (only on leader)
      delegate_to: "{{ swarm_leader }}"
      command: docker swarm join-token -q worker
      register: worker_token_result
      when: inventory_hostname == swarm_leader

    - name: Fetch manager join token (only on leader)
      delegate_to: "{{ swarm_leader }}"
      command: docker swarm join-token -q manager
      register: manager_token_result
      when: inventory_hostname == swarm_leader

    - name: Set join token facts on leader
      delegate_to: "{{ swarm_leader }}"
      set_fact:
        worker_token: "{{ worker_token_result.stdout }}"
        manager_token: "{{ manager_token_result.stdout }}"
        swarm_leader_ip: "{{ ansible_host }}"
      when: inventory_hostname == swarm_leader

    - name: Debug - Show join tokens and leader IP (on leader)
      delegate_to: "{{ swarm_leader }}"
      debug:
        msg: "Leader IP: {{ swarm_leader_ip }}, Worker token: {{ worker_token }}, Manager token: {{ manager_token }}"
      when: inventory_hostname == swarm_leader

# PLAY 5: Distribute Join Token Facts to All Nodes
- name: Distribute join token facts globally
  hosts: orange
  gather_facts: no
  tasks:
    - name: Set join token facts on all nodes from leader
      set_fact:
        worker_token: "{{ hostvars[swarm_leader]['worker_token'] }}"
        manager_token: "{{ hostvars[swarm_leader]['manager_token'] }}"
        swarm_leader_ip: "{{ hostvars[swarm_leader]['swarm_leader_ip'] }}"

    - name: Debug - Confirm join token facts on this node
      debug:
        msg: "On {{ inventory_hostname }}: Leader IP: {{ swarm_leader_ip }}, Worker token: {{ worker_token }}, Manager token: {{ manager_token }}"

# PLAY 6: Update Non-Leader Nodes (Serially)
- name: Update Non-Leader Nodes
  hosts: orange
  serial: 1
  gather_facts: no
  become: yes
  tasks:
    - name: Skip processing if this node is the leader
      meta: end_play
      when: inventory_hostname == swarm_leader

    - name: Get node role
      command: docker node inspect self --format "{{ '{{.Spec.Role}}' }}"
      register: node_role
      changed_when: false
      ignore_errors: true

    - name: Debug - Show node role for this node
      debug:
        msg: "{{ inventory_hostname }} role: {{ node_role.stdout | default('unknown') }}"

    - name: Demote node if it is a manager (delegated to leader)
      delegate_to: "{{ swarm_leader }}"
      community.docker.docker_node:
        hostname: "{{ inventory_hostname }}"
        role: worker
      when: (node_role.stdout | trim) == "manager"
      ignore_errors: yes

    - name: Have node leave the swarm
      command: docker swarm leave
      register: leave_result
      failed_when: leave_result.rc != 0

    - name: Remove old docker_gwbridge network on node
      community.docker.docker_network:
        name: docker_gwbridge
        state: absent
      ignore_errors: yes

    - name: Create new docker_gwbridge network on node
      community.docker.docker_network:
        name: docker_gwbridge
        driver: "{{ docker_gwbridge_config.driver }}"
        ipam_config: "{{ docker_gwbridge_config.ipam_config }}"
        driver_options: "{{ docker_gwbridge_config.driver_options }}"
        enable_ipv6: "{{ docker_gwbridge_config.enable_ipv6 }}"

    - name: Rejoin the swarm as worker
      command: docker swarm join --token {{ worker_token }} {{ swarm_leader_ip }}:2377
      when: inventory_hostname != swarm_leader

    - name: Promote node back to manager if originally a manager (delegated to backup manager)
      delegate_to: "{{ groups['orange'] | difference([swarm_leader, inventory_hostname]) | first }}"
      community.docker.docker_node:
        hostname: "{{ inventory_hostname }}"
        role: manager
      when: (node_role.stdout | trim) == "manager"
      ignore_errors: yes

# PLAY 7: Update the Leader Node (Processed Last) with Removal of Stale Record
- name: Update Swarm Leader (Processed Last)
  hosts: orange
  serial: 1
  gather_facts: no
  become: yes
  tasks:
    - name: Skip if not the leader
      meta: end_play
      when: inventory_hostname != swarm_leader

    - name: Debug - Updating leader node
      debug:
        msg: "Updating leader: {{ inventory_hostname }} (ID: {{ hostvars[inventory_hostname]['node_id'] | default('') }})"

    - name: Safety Check - List current manager nodes
      command: docker node ls --filter "role=manager" --format "{{ '{{.Hostname}}' }}"
      register: manager_list
      changed_when: false

    - name: Debug - Manager nodes list
      debug:
        msg: "Manager nodes: {{ manager_list.stdout_lines | default([]) }}"

    - name: Fail if less than 2 managers exist
      fail:
        msg: "Not enough managers in the swarm to safely update the leader."
      when: (manager_list.stdout_lines | length) < 2

    - name: Remove stale leader node record via backup manager
      delegate_to: "{{ groups['orange'] | difference([swarm_leader]) | first }}"
      command: docker node rm {{ swarm_leader_id }}
      register: remove_result
      failed_when: remove_result.rc != 0

    - name: Pause to allow removal to propagate
      pause:
        seconds: 10

    - name: Verify stale node record is removed
      command: docker node ls --filter "id={{ swarm_leader_id }}" --format "{{ '{{.ID}}' }}"
      register: node_check
      changed_when: false
      failed_when: node_check.stdout | length > 0

    - name: Leader leaves the swarm
      command: docker swarm leave
      register: leader_leave_result
      failed_when: leader_leave_result.rc != 0

    - name: Remove old docker_gwbridge network on leader
      community.docker.docker_network:
        name: docker_gwbridge
        state: absent
      ignore_errors: yes

    - name: Create new docker_gwbridge network on leader
      community.docker.docker_network:
        name: docker_gwbridge
        driver: "{{ docker_gwbridge_config.driver }}"
        ipam_config: "{{ docker_gwbridge_config.ipam_config }}"
        driver_options: "{{ docker_gwbridge_config.driver_options }}"
        enable_ipv6: "{{ docker_gwbridge_config.enable_ipv6 }}"

    - name: Leader rejoins the swarm as manager
      command: docker swarm join --token {{ manager_token }} {{ swarm_leader_ip }}:2377

    - name: Promote leader back to manager via backup manager
      delegate_to: "{{ groups['orange'] | difference([swarm_leader]) | first }}"
      community.docker.docker_node:
        hostname: "{{ inventory_hostname }}"
        role: manager

    - name: Refresh join tokens on leader (optional)
      command: docker swarm join-token -q worker
      register: new_worker_token

    - name: Debug - New worker join token
      debug:
        msg: "New worker token: {{ new_worker_token.stdout }}"
