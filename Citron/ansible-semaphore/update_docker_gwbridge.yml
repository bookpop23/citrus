- name: Determine the current Swarm leader
  hosts: orange
  gather_facts: no
  become: yes
  tasks:
    - name: Get the current Swarm leader
      run_once: true
      command: docker node ls --format "{{ '{{.Hostname}} {{.Leader}}' }}"
      register: swarm_leader_output
      changed_when: false

    - name: Extract and store Swarm leader (on localhost)
      run_once: true
      delegate_to: localhost
      set_fact:
        swarm_leader: "{{ item.split()[0] }}"
      when: "'Leader' in item"
      with_items: "{{ swarm_leader_output.stdout_lines }}"

    - name: Propagate Swarm leader fact to all nodes
      set_fact:
        swarm_leader: "{{ hostvars['localhost']['swarm_leader'] }}"
      delegate_to: "{{ item }}"
      delegate_facts: true
      with_items: "{{ groups['orange'] }}"

    - name: Debug - Confirm swarm leader fact on all nodes
      debug:
        msg: "Swarm leader is {{ swarm_leader }}"

- name: Fetch Swarm join tokens
  hosts: "{{ hostvars['localhost']['swarm_leader'] }}"
  become: yes
  gather_facts: no
  tasks:
    - name: Fetch Swarm join tokens
      command: docker swarm join-token -q {{ item }}
      register: swarm_tokens
      changed_when: false
      loop:
        - worker
        - manager

    - name: Store Swarm join tokens
      set_fact:
        worker_token: "{{ swarm_tokens.results[0].stdout }}"
        manager_token: "{{ swarm_tokens.results[1].stdout }}"

    - name: Distribute Swarm tokens to all nodes
      set_fact:
        worker_token: "{{ hostvars[inventory_hostname]['worker_token'] }}"
        manager_token: "{{ hostvars[inventory_hostname]['manager_token'] }}"
        swarm_leader_ip: "{{ hostvars[inventory_hostname]['swarm_leader'] }}"
      delegate_to: "{{ item }}"
      delegate_facts: true
      with_items: "{{ groups['orange'] }}"
