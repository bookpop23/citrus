---
- name: Fetch Swarm Join Tokens from Leader
  hosts: "{{ swarm_leader }}"
  gather_facts: no
  become: yes
  tasks:
    - name: Fetch worker join token on leader
      command: docker swarm join-token -q worker
      register: worker_token_result

    - name: Fetch manager join token on leader
      command: docker swarm join-token -q manager
      register: manager_token_result

    - name: Set join tokens facts on leader
      set_fact:
        worker_token: "{{ worker_token_result.stdout }}"
        manager_token: "{{ manager_token_result.stdout }}"
        swarm_leader_ip: "{{ ansible_host }}"
    
    - name: Debug - Show join tokens and leader IP
      debug:
        msg: "Worker token: {{ worker_token }}, Manager token: {{ manager_token }}, Leader IP: {{ swarm_leader_ip }}"

- name: Update Non-Leader Nodes
  hosts: orange
  serial: 1
  gather_facts: no
  become: yes
  tasks:
    - name: Skip processing if this is the leader node
      meta: end_play
      when: inventory_hostname == swarm_leader

    - name: Demote node if it is a manager (skip for worker)
      command: docker node demote $(hostname)
      when: hostvars[inventory_hostname].manager | default(true) | bool
      ignore_errors: yes

    - name: Leave the swarm
      command: docker swarm leave

    - name: Remove old docker_gwbridge network
      command: docker network rm docker_gwbridge
      ignore_errors: yes

    - name: Create new docker_gwbridge network
      command: >
        docker network create --driver bridge --subnet=172.22.0.0/24 --ipv6 --subnet=2600:1702:6650:9b20:22::/80 --opt com.docker.network.bridge.name=docker_gwbridge docker_gwbridge

    - name: Rejoin the swarm as worker
      command: docker swarm join --token {{ worker_token }} {{ swarm_leader_ip }}:2377

    - name: Promote node back to manager if originally a manager
      command: docker node promote $(hostname)
      when: hostvars[inventory_hostname].manager | default(true) | bool

- name: Update Swarm Leader (Processed Last)
  hosts: "{{ swarm_leader }}"
  serial: 1
  gather_facts: no
  become: yes
  tasks:
    - name: Ensure a backup manager exists (assume at least one non-leader manager is online)
      debug:
        msg: "Assuming backup manager exists."

    - name: Demote the swarm leader
      command: docker node demote $(hostname)

    - name: Leader leaves the swarm
      command: docker swarm leave

    - name: Remove old docker_gwbridge network on leader
      command: docker network rm docker_gwbridge
      ignore_errors: yes

    - name: Create new docker_gwbridge network on leader
      command: >
        docker network create --driver bridge --subnet=172.22.0.0/24 --ipv6 --subnet=2600:1702:6650:9b20:22::/80 --opt com.docker.network.bridge.name=docker_gwbridge docker_gwbridge

    - name: Leader rejoins the swarm as manager
      command: docker swarm join --token {{ manager_token }} {{ swarm_leader_ip }}:2377

    - name: Promote leader back to manager
      command: docker node promote $(hostname)

    - name: Refresh join tokens on leader (optional)
      command: docker swarm join-token -q worker
      register: new_worker_token

    - name: Debug - New worker join token
      debug:
        msg: "New worker token: {{ new_worker_token.stdout }}"
