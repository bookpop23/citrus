services:
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel debug
    hostname: redis
    networks:
      - swarm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 60s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - $DOCKERDIR/appdata/redis/data:/data
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
    deploy:
      mode: replicated 
      replicas: 1
      labels:
        - traefik.enable=true
        # 6379/tcp
        - traefik.tcp.routers.redis.rule=HostSNI(`*`)
        - traefik.tcp.routers.redis.entrypoints=redis-tcp
        - traefik.tcp.routers.redis.service=redis-service
        - traefik.tcp.services.redis-service.loadbalancer.server.port=6379


  postgresql:
    image: postgres:16-alpine
    restart: unless-stopped
    hostname: postgresql
    networks:
      - swarm-network        
    stop_grace_period: 30s
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      start_period: 300s
      interval: 30s
      retries: 5
      timeout: 5s

    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
      - POSTGRES_USER=${PG_USER:?database username required}
      - POSTGRES_PASSWORD=${PG_PASS:?database password required}
    # ports:
    #   - target: 5432
    #     published: 5432
    #     protocol: tcp
    #     mode: ingress
    volumes:
      - $DOCKERDIR/appdata/postgresql/data:/var/lib/postgresql/data
    deploy:
      mode: replicated 
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.tcp.routers.postgresql.rule=HostSNI(`*`)
        - traefik.tcp.routers.postgresql.entrypoints=postgresql-tcp
        - traefik.tcp.routers.postgresql.service=postgresql-service
        - traefik.tcp.services.postgresql-service.loadbalancer.server.port=5432

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    secrets:
      - password
    networks:
      - swarm-network
    environment:
      - TZ=${TZ}
      - PGADMIN_DEFAULT_EMAIL=reid@reidsprite.com
      - PGADMIN_DEFAULT_PASSWORD_FILE=/run/secrets/password
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=False
      - PGADMIN_AUTHENTIK_CLIENT_ID=rHNE1teYhd4E2x2YCQIUBRrRdyJUfK62NF3etajj
      - PGADMIN_AUTHENTIK_CLIENT_SECRET=w2YOyfudLV5evhynCsNjlb6lWImfHLIksNz1QMUP4AMues1nxqClMxovyZUfNnnQSUP3YbQtU2q2VdY9uw8NOhQtXACIgcF7EfCrYhWOW8SjMuUHaEhIqQIsp43H1Wtf
    ports:
      - target: 80
        published: 5050
        mode: ingress
    volumes:
      - $DOCKERDIR/appdata/pgadmin4/data:/var/lib/pgadmin
      - $DOCKERDIR/appdata/pgadmin4/config_local.py:/pgadmin4/config_local.py
    deploy:
      mode: replicated 
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.http.routers.pgadmin.rule=Host(`pgadmin.$HOSTNAME.$DOMAIN`) || Host(`pgadmin.$DOMAIN`)
        - traefik.http.routers.pgadmin.entrypoints=websecure
        - traefik.http.routers.pgadmin.tls=true
        - traefik.http.routers.pgadmin.tls.certresolver=cloudflare
        - traefik.http.routers.pgadmin.service=pgadmin
        - traefik.http.services.pgadmin.loadbalancer.server.port=80

  adminer:
    image: adminer
    restart: always
    networks:
      - swarm-network
    ports:
      - 8080:8080
  
  notifiarr:
    image: golift/notifiarr:latest
    container_name: notifiarr
    restart: unless-stopped
    networks:
      - swarm-network
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
      - DN_API_KEY=fb11c148-eba1-417d-b14d-d93abf02c89fuk1_SapYDsV8ptRakTFmdNQP4lobuGnkaChHkUCHWmZH
    ports:
      - target: 5454
        published: 5454
        protocol: tcp
        mode: ingress
    volumes:
      - $DOCKERDIR/appdata/notifiarr/config:/config
      - /var/run/utmp:/var/run/utmp
      - /etc/machine-id:/etc/machine-id
    deploy:
      mode: replicated 
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.http.routers.notifiarr-orange.rule=Host(`notifiarr-orange.$HOSTNAME.$DOMAIN`)
        - traefik.http.routers.notifiarr-orange.entrypoints=websecure
        - traefik.http.routers.notifiarr-orange.tls=true
        - traefik.http.routers.notifiarr-orange.tls.certresolver=cloudflare
        - traefik.http.routers.notifiarr-orange.service=notifiarr-orange
        - traefik.http.services.notifiarr-orange.loadbalancer.server.port=5454

  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    ports:
      - 3001:3001
    volumes:
      - $DOCKERDIR/appdata/uptime-kuma/data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    networks:
      - swarm-network
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
      - UPTIME_KUMA_CLOUDFLARED_TOKEN=$CLOUDFLARE_TOKEN   
    deploy:
      mode: replicated 
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.http.routers.uptime-kuma.rule=Host(`status.$HOSTNAME.$DOMAIN`)
        - traefik.http.routers.uptime-kuma.entrypoints=websecure
        - traefik.http.routers.uptime-kuma.tls=true
        - traefik.http.routers.uptime-kuma.tls.certresolver=cloudflare
        - traefik.http.routers.uptime-kuma.service=uptime-kuma
        - traefik.http.services.uptime-kuma.loadbalancer.server.port=3001

networks:
  swarm-network:
    external: true

secrets:
  password:
    external: true