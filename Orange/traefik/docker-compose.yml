services:

  traefik:
    image: traefik:latest
    restart: unless-stopped
    network_mode: host  # This allows Traefik to directly bind to the host's IPv6 address
    healthcheck:
      test: ["CMD-SHELL", "/bin/ash", "-c", "traefik healthcheck"]
      start_period: 90s
      interval: 30s
      retries: 5
      timeout: 3s
    # ports:
    #   - target: 80
    #     published: 80
    #     protocol: tcp
    #     mode: ingress
    #   - target: 443
    #     published: 443
    #     protocol: tcp
    #     mode: ingress
    # dns:
    #   - 192.168.1.1
    secrets:
      - username_password
      - cf_dns_api_token
    environment:
      - TZ=$TZ
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cf_dns_api_token
      - HTPASSWD_FILE=/run/secrets/username_password
    deploy:
      mode: global 
      placement:
        constraints:
          - node.role == manager

      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true

        # Use the traefik-public network (declared below)
        # - traefik.swarm.network=traefik-public

        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        # - traefik.constraint-label=traefik-public

        # admin-auth middleware with HTTP Basic auth

        # Using the environment variables USERNAME and HASHED_PASSWORD
        # - traefik.http.middlewares.test-auth.basicauth.usersfile=/run/secrets/user_pass_md5_file

        # traefik-https the actual router using HTTPS
        - traefik.http.routers.traefik.rule=Host(`traefik.$HOSTNAME.$DOMAIN`) || Host(`traefik.$DOMAIN`)
        - traefik.http.routers.traefik.entrypoints=websecure
        - traefik.http.routers.traefik.tls=true
        - traefik.http.routers.traefik.tls.certresolver=cloudflare
        #- traefik.http.routers.traefik.tls.domains[0].main=$DOMAIN        
        #- traefik.http.routers.traefik.tls.domains[0].main=$HOSTNAME.$DOMAIN
        #- traefik.http.routers.traefik.tls.domains[0].sans=*.$HOSTNAME.$DOMAIN

        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik.service=api@internal

        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        #- traefik.http.middlewares.https-redirect.redirectscheme.scheme=websecure
        #- traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        
        # Enable HTTP Basic auth, using the middleware created above
        # - traefik.http.routers.traefik-public-https.middlewares=admin-auth

        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik.loadbalancer.server.port=443
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock
      # Config
      - $DOCKERDIR/appdata/traefik/data/traefik.yml:/etc/traefik/traefik.yml
      # Mount the volume to store the certificates
      - $DOCKERDIR/appdata/traefik/data/certs:/certs
      - $DOCKERDIR/appdata/traefik/data/rules:/rules   # Dynamic File Provider directory
      # Logs
      - $DOCKERDIR/appdata/traefik/logs:/logs
    networks:
      - swarm-network

#configs:
#  traefik.yml:
#    external: true

secrets:
  username_password:
    external: true
  cf_dns_api_token:
    external: true

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  swarm-network:
    external: true