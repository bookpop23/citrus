---

services:
  server:
    image: ghcr.io/goauthentik/server:latest
    command: server
    hostname: authentik_server
    environment:
      TZ: $TZ
      PGID: $PGID
      PUID: $PUID
      AUTHENTIK_REDIS__HOST: 'redis'
      AUTHENTIK_POSTGRESQL__HOST: 'postgresql'
      AUTHENTIK_POSTGRESQL__USER: 'authentik'
      AUTHENTIK_POSTGRESQL__NAME: 'authentik'
      AUTHENTIK_POSTGRESQL__PASSWORD: $PG_PASS
      AUTHENTIK_SECRET_KEY: $AUTHENTIK_SECRET_KEY
      AUTHENTIK_WEB__WORKERS: 2
      AUTHENTIK_ERROR_REPORTING__ENABLED: 'true'
      AUTHENTIK_LOG_LEVEL: 'debug'
      AUTHENTIK_LOGGING__VERSION: 1
      AUTHENTIK_LOGGING__LOGGERS__authentik.providers.proxy__level: 'DEBUG'
    networks:
      - traefik-public
    volumes:
      - $DOCKERDIR/appdata/authentik/media:/media
      - $DOCKERDIR/appdata/authentik/custom-templates:/templates
    deploy:
      labels:
        traefik.enable: 'true'
        traefik.http.routers.authentik.rule: 'Host(`auth.${DOMAIN}`)'
        traefik.http.routers.authentik-output.rule:  'HostRegexp(`^.+\.${DOMAIN}$`) && PathPrefix(`/outpost.goauthentik.io/`)'
        traefik.http.routers.authentik.service: 'authentik'
        traefik.http.services.authentik.loadbalancer.server.port: '9000'
  worker:
    image: ghcr.io/goauthentik/server:latest
    command: worker
    hostname: authentik_worker
    deploy:
      replicas: 1
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    networks:
      - traefik-public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $DOCKERDIR/appdata/authentik/media:/media
      - $DOCKERDIR/appdata/authentik/certs:/certs
      - $DOCKERDIR/appdata/authentik/custom-templates:/templates

  whoami-catchall:
    image: traefik/whoami:latest
    container_name: whoami-catchall
    security_opt:
      - no-new-privileges:true
    depends_on:
      - server
      - worker
    networks:
      - traefik-public
    environment:
      TZ: $TZ
    deploy:
      labels:
        traefik.enable: 'true'
        traefik.http.routers.whoami-catchall.rule: 'Host(`whoami-catchall.${DOMAIN}`)'
        traefik.http.routers.whoami-catchall.middlewares: 'authentik@file'
        traefik.http.routers.whoami-catchall.priority: 10
        traefik.http.routers.whoami-catchall.service: 'whoami-catchall'
        traefik.http.services.whoami-catchall.loadbalancer.server.port: '80'

        # traefik.http.routers.whoami-catchall-auth.rule: "Host(`whoami-catchall.reidsprite.com`) && PathPrefix(`/outpost.goauthentik.io/`)"
        # traefik.http.routers.whoami-catchall-auth.priority: 15
        # traefik.http.routers.whoami-catchall-auth.service: "authentik"
        # traefik.http.services.whoami-catchall-auth.loadbalancer.server.port: 9000

networks:
  traefik-public:
    external: true
