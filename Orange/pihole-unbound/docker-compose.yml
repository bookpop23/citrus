services:
  pihole1:
    image: pihole/pihole:latest
    hostname: pihole1
    networks:
      - traefik-public  # Allow Swarm services to use Pi-hole as DNS
    ports:
      - target: 53
        published: 53
        protocol: tcp
        mode: host
      - target: 53
        published: 53
        protocol: udp
        mode: host
      - target: 80
        published: 8091
        protocol: tcp
    environment:
      TZ: $TZ
      PIHOLE_UID: $PUID
      PIHOLE_GID: $PGID
      FTLCONF_webserver_api_password: 'ElmR2314'
      FTLCONF_dns_dnssec: 'true'
      FTLCONF_dns_revServers: 'true,192.168.0.0/20,192.168.1.1#53,$DOMAIN'
    cap_add:
      - NET_ADMIN
      - SYS_TIME
      - SYS_NICE
    volumes:
      - $DOCKERDIR/appdata/pihole1/data:/etc/pihole/
      - $DOCKERDIR/appdata/pihole1/dnsmasq:/etc/dnsmasq.d/
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.pihole == pihole1
      labels:
        - "traefik.enable=true"

        ## TCP Routers/Services for Admin Interface
        - traefik.http.routers.pihole-admin.service=pihole-admin       
        - traefik.http.routers.pihole-admin.rule=Host(`pihole.$DOMAIN`)
        - traefik.http.routers.pihole-admin.entrypoints=websecure
        - traefik.http.routers.pihole-admin.tls=true
        - traefik.http.routers.pihole-admin.tls.certresolver=cloudflare
        - traefik.http.services.pihole-admin.loadbalancer.server.port=80

        # Attach the defined middleware to a router
        - traefik.http.routers.pihole-admin.middlewares=pihole-redirectregex
        # Define a middleware regex
        - "traefik.http.middlewares.pihole-redirectregex.redirectregex.regex=^https?://pihole.$DOMAIN/$$"
        # Define a replacement
        - "traefik.http.middlewares.pihole-redirectregex.redirectregex.replacement=https://pihole.$DOMAIN/admin/"
  
  pihole2:
    image: pihole/pihole:latest
    hostname: pihole2
    networks:
      - traefik-public  # Allow Swarm services to use Pi-hole as DNS
    ports:
      - target: 53
        published: 53
        protocol: tcp
        mode: host
      - target: 53
        published: 53
        protocol: udp
        mode: host
    environment:
      TZ: $TZ
      PIHOLE_UID: $PUID
      PIHOLE_GID: $PGID
      FTLCONF_webserver_api_password: 'ElmR2314'
      FTLCONF_dns_dnssec: 'true'
      FTLCONF_dns_revServers: 'true,192.168.0.0/20,192.168.1.1#53,$DOMAIN'
    cap_add:
      - NET_ADMIN
      - SYS_TIME
      - SYS_NICE
    volumes:
      - $DOCKERDIR/appdata/pihole2/data:/etc/pihole/
      - $DOCKERDIR/appdata/pihole2/dnsmasq:/etc/dnsmasq.d/
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.pihole == pihole2
      labels:
        - "traefik.enable=true"

        ## TCP Routers/Services for Admin Interface
        - traefik.http.routers.pihole2-admin.service=pihole2-admin       
        - traefik.http.routers.pihole2-admin.rule=Host(`pihole2.$DOMAIN`)
        - traefik.http.routers.pihole2-admin.entrypoints=websecure
        - traefik.http.routers.pihole2-admin.tls=true
        - traefik.http.routers.pihole2-admin.tls.certresolver=cloudflare
        - traefik.http.services.pihole2-admin.loadbalancer.server.port=80

        # Attach the defined middleware to a router
        - traefik.http.routers.pihole2-admin.middlewares=pihole2-redirectregex
        # Define a middleware regex
        - "traefik.http.middlewares.pihole2-redirectregex.redirectregex.regex=^https?://pihole2.$DOMAIN/$$"
        # Define a replacement
        - "traefik.http.middlewares.pihole2-redirectregex.redirectregex.replacement=https://pihole2.$DOMAIN/admin/"

  unbound:
    image: sgaduuw/unbound:latest
    networks:
      - traefik-public
    deploy:
      mode: global
    volumes:
      - $DOCKERDIR/appdata/pihole/unbound:/opt/unbound/etc/unbound/:rw
    environment:
      - UNBOUND_CACHEDB_BACKEND=redis
    healthcheck:
      test: ["CMD", "drill", "@127.0.0.1", "dnssec.works"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s

  nebula-sync:
    image: lovelaze/nebula-sync:latest
    networks:
      - traefik-public
    volumes:
      # Mount the local host directories from both instances. Adjust paths as necessary.
      - $DOCKERDIR/appdata/pihole1/data:/sync/pihole1-data:ro
      - $DOCKERDIR/appdata/pihole2/data:/sync/pihole2-data:ro
      # Optionally, include dnsmasq configuration if desired:
      - $DOCKERDIR/appdata/pihole1/dnsmasq:/sync/pihole1-dnsmasq:ro
      - $DOCKERDIR/appdata/pihole2/dnsmasq:/sync/pihole2-dnsmasq:ro
    deploy:
      replicas: 1
    environment:
      - TZ=$TZ
      - PRIMARY="http://pihole1|ElmR2314"
      - REPLICAS="http://pihole2|ElmR2314"
      - FULL_SYNC=false
      - CRON="0 * * * *"
      - RUN_GRAVITY=true
      - CLIENT_SKIP_TLS_VERIFICATION=true
      - SYNC_CONFIG_DNS=true
      - SYNC_CONFIG_NTP=true
      - SYNC_CONFIG_RESOLVER=true
      - SYNC_CONFIG_DATABASE=true
      - SYNC_CONFIG_MISC=true
      - SYNC_GRAVITY_GROUP=true
      - SYNC_GRAVITY_AD_LIST=true
      - SYNC_GRAVITY_AD_LIST_BY_GROUP=true
      - SYNC_GRAVITY_DOMAIN_LIST=true
      - SYNC_GRAVITY_DOMAIN_LIST_BY_GROUP=true
      - SYNC_GRAVITY_CLIENT=true
      - SYNC_GRAVITY_CLIENT_BY_GROUP=true

networks:
  traefik-public:
    external: true  # This uses an existing Docker Swarm network to allow Pi-hole to communicate with other services in the Swarm