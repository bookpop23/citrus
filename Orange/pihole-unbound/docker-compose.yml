services:
  pihole1:
    image: pihole/pihole:latest
    hostname: pihole1
    networks:
      - traefik-public  # Allow Swarm services to use Pi-hole as DNS
    ports:
      - target: 53
        published: 53
        protocol: tcp
        mode: host
      - target: 53
        published: 53
        protocol: udp
        mode: host
      - target: 80
        published: 8091
        protocol: tcp
    environment:
      TZ: ${TZ}
      PIHOLE_UID: ${PUID}
      PIHOLE_GID: ${PGID}
      FTLCONF_webserver_api_password: ${PIHOLE_API_PASSWORD}
      FTLCONF_dns_dnssec: 'true'
      FTLCONF_dns_revServers: 'true,192.168.0.0/20,192.168.1.1#53,${DOMAIN}'
    cap_add:
      - NET_ADMIN
      - SYS_TIME
      - SYS_NICE
    volumes:
      - $DOCKERDIR/appdata/pihole1/data:/etc/pihole/
      # - $DOCKERDIR/appdata/pihole1/data/logs:/var/log/
      - $DOCKERDIR/appdata/pihole1/dnsmasq:/etc/dnsmasq.d/
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.pihole == pihole1
      labels:
        traefik.enable: 'true'

        ## TCP Routers/Services for Admin Interface
        traefik.http.routers.pihole1-admin.service: 'pihole1-admin'
        traefik.http.routers.pihole1-admin.rule: 'Host(`dns1.${DOMAIN}`)'
        traefik.http.services.pihole1-admin.loadbalancer.server.port: '80'

        # Attach the defined middleware to a router
        traefik.http.routers.pihole1-admin.middlewares: 'pihole1-redirectregex'
        # Define a middleware regex
        traefik.http.middlewares.pihole1-redirectregex.redirectregex.regex: '^https?://dns1.${DOMAIN}/$$'
        # Define a replacement
        traefik.http.middlewares.pihole1-redirectregex.redirectregex.replacement: 'https://dns1.${DOMAIN}/admin/'
  
  pihole2:
    image: pihole/pihole:latest
    hostname: pihole2
    networks:
      - traefik-public
    ports:
      - target: 53
        published: 53
        protocol: tcp
        mode: host
      - target: 53
        published: 53
        protocol: udp
        mode: host
      - target: 80
        published: 8092
        protocol: tcp
    environment:
      TZ: ${TZ}
      PIHOLE_UID: ${PUID}
      PIHOLE_GID: ${PGID}
      FTLCONF_webserver_api_password: ${PIHOLE_API_PASSWORD} # Use the same password as pihole1
      FTLCONF_dns_dnssec: 'true'
      FTLCONF_dns_revServers: 'true,192.168.0.0/20,192.168.1.1#53,${DOMAIN}'
    cap_add:
      - NET_ADMIN
      - SYS_TIME
      - SYS_NICE
    volumes:
      - $DOCKERDIR/appdata/pihole2/data:/etc/pihole/
      # - $DOCKERDIR/appdata/pihole2/data/logs:/var/log/
      - $DOCKERDIR/appdata/pihole2/dnsmasq:/etc/dnsmasq.d/
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.pihole == pihole2
      labels:
        traefik.enable: 'true'

        ## TCP Routers/Services for Admin Interface
        traefik.http.routers.pihole2-admin.service: 'pihole2-admin'
        traefik.http.routers.pihole2-admin.rule: 'Host(`dns2.${DOMAIN}`)'
        traefik.http.services.pihole2-admin.loadbalancer.server.port: '80'

        # Attach the defined middleware to a router
        traefik.http.routers.pihole2-admin.middlewares: 'pihole2-redirectregex'
        # Define a middleware regex
        traefik.http.middlewares.pihole2-redirectregex.redirectregex.regex: '^https?://dns2.${DOMAIN}/$$'
        # Define a replacement
        traefik.http.middlewares.pihole2-redirectregex.redirectregex.replacement: 'https://dns2.${DOMAIN}/admin/'

  unbound:
    # image: sgaduuw/unbound:latest
    image: mvance/unbound-rpi:latest
    hostname: unbound
    networks:
      - traefik-public
    ports:
      - target: 53
        published: 5353
        protocol: tcp
        mode: host
      - target: 53
        published: 5353
        protocol: udp
        mode: host
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.labels.unbound == true
      labels:
        # Enable Traefik service for Unbound
        traefik.enable: 'true'

        # Enable Traefik TCP router for Unbound
        traefik.tcp.routers.unbound.rule: 'HostSNI(`*`)'
        traefik.tcp.routers.unbound.entrypoints: 'unbound-tcp'
        traefik.tcp.routers.unbound.service: 'unbound-svc'
        traefik.tcp.services.unbound-svc.loadbalancer.server.port: '53'
        
        # Enable Traefik UDP service for Unbound
        traefik.udp.routers.unbound.entrypoints: 'unbound-udp'
        traefik.udp.routers.unbound.service: 'unbound-svc'
        traefik.udp.services.unbound-svc.loadbalancer.server.port: '53'
    volumes:
      - $DOCKERDIR/appdata/unbound:/opt/unbound/etc/unbound/:rw

  nebula-sync:
    image: lovelaze/nebula-sync:latest
    networks:
      - traefik-public
    volumes:
      # Mount the local host directories from both instances. Adjust paths as necessary.
      - $DOCKERDIR/appdata/pihole1/data:/sync/pihole1-data:ro
      - $DOCKERDIR/appdata/pihole2/data:/sync/pihole2-data:ro
      # Optionally, include dnsmasq configuration if desired:
      - $DOCKERDIR/appdata/pihole1/dnsmasq:/sync/pihole1-dnsmasq:ro
      - $DOCKERDIR/appdata/pihole2/dnsmasq:/sync/pihole2-dnsmasq:ro
    deploy:
      replicas: 1
    environment:
      TZ: '$TZ'
      PRIMARY: 'http://pihole1|${PIHOLE_API_PASSWORD}'
      REPLICAS: 'http://pihole2|${PIHOLE_API_PASSWORD}'
      FULL_SYNC: 'false'
      CRON: 0 * * * *
      RUN_GRAVITY: 'true'
      CLIENT_SKIP_TLS_VERIFICATION: 'true'
      SYNC_CONFIG_DNS: 'true'
      SYNC_CONFIG_NTP: 'true'
      SYNC_CONFIG_RESOLVER: 'true'
      SYNC_CONFIG_DATABASE: 'true'
      SYNC_CONFIG_MISC: 'true'
      SYNC_GRAVITY_GROUP: 'true'
      SYNC_GRAVITY_AD_LIST: 'true'
      SYNC_GRAVITY_AD_LIST_BY_GROUP: 'true'
      SYNC_GRAVITY_DOMAIN_LIST: 'true'
      SYNC_GRAVITY_DOMAIN_LIST_BY_GROUP: 'true'
      SYNC_GRAVITY_CLIENT: 'true'
      SYNC_GRAVITY_CLIENT_BY_GROUP: 'true'

networks:
  traefik-public:
    external: true  # This uses an existing Docker Swarm network to allow Pi-hole to communicate with other services in the Swarm