services:
  pihole:
    image: pihole/pihole:latest
    hostname: pihole
    # healthcheck:
    #   test: ["CMD", "curl", "-sS", "http://172.22.0.1:8091/admin/index.php"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 120s
    depends_on:
      - unbound
    networks:
      - traefik-public  # Allow Swarm services to use Pi-hole as DNS
    ports:
      # - target: 53
      #   published: 53
      #   protocol: tcp
      #   mode: host
      # - target: 53
      #   published: 53
      #   protocol: udp
      #   mode: host
      - target: 80
        published: 8091
        protocol: tcp
    environment:
      TZ: $TZ
      PIHOLE_UID: $PUID
      PIHOLE_GID: $PGID
      FTLCONF_webserver_api_password: ''
      # FTLCONF_dns_upstreams: 'unbound#53'
      # FTLCONF_dns_listeningMode: 'all''  
      FTLCONF_dns_dnssec: 'true'
      FTLCONF_dns_revServers: 'true,192.168.0.0/20,192.168.1.1#53,$DOMAIN'
    cap_add:
      - NET_ADMIN
      - SYS_TIME
      - SYS_NICE
    volumes:
      - $DOCKERDIR/appdata/pihole/pihole-data:/etc/pihole/
      - $DOCKERDIR/appdata/pihole/pihole-dnsmasq:/etc/dnsmasq.d/
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.pihole == true
      labels:
        - "traefik.enable=true"
      
        # TCP Routing for DNS
        - "traefik.tcp.routers.pihole-dns.entrypoints=dns-tcp"
        - "traefik.tcp.routers.pihole-dns.rule=HostSNI(`*`)"
        - "traefik.tcp.routers.pihole-dns.service=pihole-dns"
        - "traefik.tcp.services.pihole-dns.loadbalancer.server.port=53"  

        # UDP Routing for DNS
        - "traefik.udp.routers.pihole-dns.entrypoints=dns-udp"
        # - "traefik.udp.routers.pihole-dns.rule=HostSNI(`*`)"
        - "traefik.udp.routers.pihole-dns.service=pihole-dns"
        - "traefik.udp.services.pihole-dns.loadbalancer.server.port=53"

        ## TCP Routers/Services for Admin Interface
        - traefik.http.routers.pihole-admin.service=pihole-admin       
        - traefik.http.routers.pihole-admin.rule=Host(`pihole.$DOMAIN`)
        - traefik.http.routers.pihole-admin.entrypoints=websecure
        - traefik.http.routers.pihole-admin.tls=true
        - traefik.http.routers.pihole-admin.tls.certresolver=cloudflare
        - traefik.http.services.pihole-admin.loadbalancer.server.port=80

        # Attach the defined middleware to a router
        - traefik.http.routers.pihole-admin.middlewares=pihole-redirectregex
        # Define a middleware regex
        - "traefik.http.middlewares.pihole-redirectregex.redirectregex.regex=^https?://pihole.$DOMAIN/$$"
        # Define a replacement
        - "traefik.http.middlewares.pihole-redirectregex.redirectregex.replacement=https://pihole.$DOMAIN/admin/"

  unbound:
    image: sgaduuw/unbound:latest
    networks:
      - traefik-public
    deploy:
      replicas: 3
    volumes:
      - $DOCKERDIR/appdata/pihole/unbound:/opt/unbound/etc/unbound/:rw
    environment:
      - UNBOUND_CACHEDB_BACKEND=redis
    healthcheck:
      test: ["CMD", "drill", "@127.0.0.1", "dnssec.works"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s

networks:
  traefik-public:
    external: true  # This uses an existing Docker Swarm network to allow Pi-hole to communicate with other services in the Swarm
